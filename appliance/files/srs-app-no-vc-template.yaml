apiVersion: v1
kind: Namespace
metadata:
  name: script-runtime-service
  labels:
    app.kubernetes.io/name: script-runtime-service
    app.kubernetes.io/instance: script-runtime-service
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-settings
  namespace: script-runtime-service
data:
  settings.json: |-
    {
      "Logging": {
        "LogLevel": {
          "Default": "Trace",
          "Microsoft": "Information"
        }
      },
      "AllowedHosts": "*",
      "RunspaceProviderSettings": {
        "K8sRunspaceImageName": "pclirunspace:latest",
        "K8sRunspacePort": 5550,
        "K8sVerifyRunspaceApiIsAccessibleOnCreate": true,
        "RunspaceTrustedCertsConfigMapName": "trusted-ca-certs",
        "MaxNumberOfRunspaces": 5,
        "MaxRunspaceIdleTimeMinutes": 10,
        "MaxRunspaceActiveTimeMinutes": 60
      },
      "ScriptExecutionStorageSettings": {
        "ServiceScriptStorageDir": "/app/service/scriptsstore",
        "NumberOfScriptsPerUser": 30,
        "NoOlderThanDays": 5
      }
    }
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: srs-setup
  namespace: script-runtime-service
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: manage-configs
  namespace: script-runtime-service
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: manage-srs-setup
  namespace: script-runtime-service
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: manage-configs
subjects:
- kind: ServiceAccount
  name: srs-setup
---
apiVersion: batch/v1
kind: Job
metadata:
  name: srs-setup
  namespace: script-runtime-service
spec:
  template:
    spec:
      serviceAccountName: srs-setup
      containers:
      - image: "srs-setup:1.0"
        name: srs-setup
        imagePullPolicy: IfNotPresent
        command: ["/app/service/setup"]
        env:
          - name: RUN
            value: InitialSetup          
          - name: SERVICE_HOSTNAME
            value: "${SRSA_HOSTNAME}"
      restartPolicy: Never
  backoffLimit: 1
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: srs-admin
  namespace: script-runtime-service
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: manage-admin-configs
  namespace: script-runtime-service
rules:
- apiGroups: [""]
  resources: ["pods", "configmaps", "secrets"]
  verbs: ["get", "list", "create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: srs-admin-settings
  namespace: script-runtime-service
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: manage-admin-configs
subjects:
- kind: ServiceAccount
  name: srs-admin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: srs-admin-api
  name: srs-admin-api
  namespace: script-runtime-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: srs-admin-api
  template:
    metadata:
      labels:
        app: srs-admin-api
    spec:
      serviceAccountName: srs-admin
      containers:
        - image: "srs-admin-api:1.0"
          imagePullPolicy: IfNotPresent
          name: srs-admin-api
          volumeMounts:
            - name: admin-settings
              mountPath: "/app/service/settings/admin-settings.json"
              subPath: "admin-settings.json"
              readOnly: true
            - name: srs-tls
              mountPath: "/app/service/settings/certs/tls"
              readOnly: true
            - name: sign-certificate
              mountPath: "/app/service/settings/certs/sign"
              readOnly: true
          ports:
            - containerPort: 5480
              protocol: TCP
      volumes:
        - name: sign-certificate
          secret:
            secretName: sign-cert
        - name: srs-tls
          secret:
            secretName: srs-tls
        - name: admin-settings
          configMap:
            name: admin-settings
            items:
            - key: admin-settings.json
              path: admin-settings.json
---
apiVersion: v1
kind: Service
metadata:
  name:  srs-admin-api
  namespace: script-runtime-service
spec:
  ports:
  - port: 5480
    protocol: TCP
    targetPort: 5480
  selector:
    app: srs-admin-api
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: srs-runspace-provider
  namespace: script-runtime-service
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: manage-pods
  namespace: script-runtime-service
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log", "configmaps","services"]
  verbs: ["get", "list", "watch", "create", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "create", "delete"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: manage-pods_srs-runspace-provider
  namespace: script-runtime-service
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: manage-pods
subjects:
- kind: ServiceAccount
  name: srs-runspace-provider
  namespace: script-runtime-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: srs-apigateway
  name: srs-apigateway
  namespace: script-runtime-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: srs-apigateway
  template:
    metadata:
      labels:
        app: srs-apigateway
    spec:
      serviceAccountName: srs-runspace-provider
      containers:
        - image: "srs-apigateway:1.0"
          imagePullPolicy: IfNotPresent
          name: srs-apigateway
          volumeMounts:
            - name: service-settings
              mountPath: "/app/service/settings/settings.json"
              subPath: "settings.json"
              readOnly: true
            - name: sts-settings
              mountPath: "/app/service/settings/sts-settings.json"
              subPath: "sts-settings.json"
              readOnly: true
            - name: trusted-ca-certs
              mountPath: "/app/service/trusted-ca-certs"
              readOnly: true
            - name: sign-certificate
              mountPath: "/app/service/settings/certs"
              readOnly: true
          ports:
            - containerPort: 5050
              protocol: TCP
      volumes:
        - name: sign-certificate
          secret:
            secretName: sign-cert
        - name: trusted-ca-certs
          configMap:
            name: trusted-ca-certs
        - name: service-settings
          configMap:
            name: service-settings
            items:
            - key: settings.json
              path: settings.json
        - name: sts-settings
          configMap:
            name: sts-settings
            items:
            - key: sts-settings.json
              path: sts-settings.json
---
apiVersion: v1
kind: Service
metadata:
  name: srs-apigateway
  namespace: script-runtime-service
spec:
  ports:
  - port: 5050
    protocol: TCP
    targetPort: 5050
  selector:
    app: srs-apigateway
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: srs-ingress
  namespace: script-runtime-service
spec:
  tls:
  - hosts:
    - ${SRSA_HOSTNAME}
    secretName: srs-tls
  rules:
  - host: ${SRSA_HOSTNAME}
  - http:
      paths:
      - path: /
        backend:
          serviceName: srs-apigateway
          servicePort: 5050
      - path: /admin
        backend:
          serviceName: srs-admin-api
          servicePort: 5480
